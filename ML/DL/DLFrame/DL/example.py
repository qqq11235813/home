'''
#####################################################################
##############example code by ZJZ####################################
#####################################################################
'''


import numpy as np
from sklearn import datasets
import matplotlib.pyplot as plt
from dlElement import *
from dataPreprocess import *

if __name__ =="__main__":

####################################################################################
####################################################################################

#Here we use the MNIST handwriting dataset.You can change your own datasets here


######show some data########################
    #plt.gray()
    #plt.matshow(digits.images[5])
    #plt.show()
#############################################
    
    train_x, test_x, train_y, test_y, test_y2 = train_test_genetate(images_and_labels) #load the dataset (Detail:dataPreprocessing.py)

###############################################################################################
#################################################################################################
################################################################################################


#####################################################################################################
################Train the model######################################################################

#detail:dlElement.py

    parameters = L_layer_model(train_x, train_y, [64,128,10],cost_type = "softmax", iterations = 1500, construction = "relu&softmax", print_cost = True)

#####################################################################################################
######################################################################################################
######################################################################################################

###############################################################################################
############# make prediction ###################################################################
    cost, predict_rate = make_prediction(parameters, test_x, test_y, test_y2)
    print "test cost:", cost
    print "final accuracy:" + str(100*predict_rate) + "%"

############################################################################################